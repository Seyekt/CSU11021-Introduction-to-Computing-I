


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1021 2018/2019 Lab 6
    3 00000000         ;
    4 00000000         ; RAM @ 0x4000000 sz = 0x10000 (64K)
    5 00000000         ;
    6 00000000         
    7 00000000         ;
    8 00000000         ; hardware registers
    9 00000000         ;
   10 00000000         
   11 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
   12 00000000         
   13 00000000 E000C000 
                       U0RBR   EQU              0xE000C000
   14 00000000 E000C000 
                       U0THR   EQU              0xE000C000
   15 00000000 E000C00C 
                       U0LCR   EQU              0xE000C00C
   16 00000000 E000C014 
                       U0LSR   EQU              0xE000C014
   17 00000000         
   18 00000000         
   19 00000000                 AREA             RESET, CODE, READONLY
   20 00000000                 ENTRY
   21 00000000         
   22 00000000         ; 
   23 00000000         ; hardware initialisation
   24 00000000         ;
   25 00000000 E59FD160        LDR              R13, =0x40010000 ; initialse SP
                                                            
   26 00000004 E59F0160        LDR              R0, =PINSEL0 ; enable UART0 TxD
                                                             and RxD signals
   27 00000008 E3A01050        MOV              R1, #0x50
   28 0000000C E5C01000        STRB             R1, [R0]
   29 00000010 E59F0158        LDR              R0, =U0LCR  ; 7 data bits + par
                                                            ity
   30 00000014 E3A01002        LDR              R1, =0x02
   31 00000018 E5C01000        STRB             R1, [R0]
   32 0000001C         
   33 0000001C         ;
   34 0000001C         ; Sieve of Eratosthenes
   35 0000001C         ;
   36 0000001C         
   37 0000001C         ;Input
   38 0000001C         
   39 0000001C         ;LDR R0, =STR0  ; R0 -> "Please enter a word: "
   40 0000001C         ;BL PUTS  ; put string
   41 0000001C         ;LDR R4, =0x40000000 ; load memory address
   42 0000001C         ;LOOP1 BL GET  ; get character
   43 0000001C         ;BL PUT  ; put character
   44 0000001C         ;CMP R0, #0x0d  ; is the character 'enter'?
   45 0000001C         ;BEQ readEnd1  ; if so, end read
   46 0000001C         ;; SUB R0, R0, #0x30
   47 0000001C         ;STR R0, [R4], #1 ; store and increment
   48 0000001C         ;B LOOP1  ; repeat
   49 0000001C         
   50 0000001C         ;readEnd1
   51 0000001C         



ARM Macro Assembler    Page 2 


   52 0000001C         
   53 0000001C         
   54 0000001C         ; CONVERT TO HEX
   55 0000001C         
   56 0000001C         ;LDR R4, =0x40000000 ; load memory address
   57 0000001C         ;MOV R6, #1
   58 0000001C         
   59 0000001C         ;LOOP2 LDR R5, [R4], #1
   60 0000001C         ;CMP R5, #0 
   61 0000001C         ;BEQ END69
   62 0000001C         ;ADD R6, R6, #1
   63 0000001C         ;SUB R5, R5, #0x30
   64 0000001C         
   65 0000001C         ;B LOOP2
   66 0000001C         
   67 0000001C         ;END69
   68 0000001C         
   69 0000001C         ; LDR, R12, #1000  ; N = 1000
   70 0000001C         
   71 0000001C         ; Set all bits in RAM TO 1
   72 0000001C         ; 100000 / 32 = 3125
   73 0000001C         ; Start at 0x400030D4
   74 0000001C         
   75 0000001C E3A0B000        MOV              R11, #0
   76 00000020 E3A04101        LDR              R4, =0x40000000
   77 00000024         
   78 00000024 E59FC148 
                       LOOPA   LDR              R12, =0xC35 ; 3125
   79 00000028 E15B000C        CMP              R11, R12
   80 0000002C 2A000003        BHS              ENDA
   81 00000030         
   82 00000030 E3E05000        LDR              R5, =0xFFFFFFFF
   83 00000034 E4845004        STR              R5, [R4], #4
   84 00000038         
   85 00000038 E28BB001        ADD              R11, R11, #1
   86 0000003C EAFFFFF8        B                LOOPA
   87 00000040         
   88 00000040         ENDA
   89 00000040         
   90 00000040         ;
   91 00000040         ;
   92 00000040         ;Sieve
   93 00000040         
   94 00000040         
   95 00000040         
   96 00000040         
   97 00000040 EAFFFFFE 
                       STOP    B                STOP
   98 00000044         
   99 00000044 50 6C 65 
              61 73 65 
              20 65 6E 
              74 65 72 
              20 61 6E 
              20 69 6E 
              74 65 67 
              65 72 3A 
              20 0A 00 
              00       STR0    DCB              "Please enter an integer: ", 0x



ARM Macro Assembler    Page 3 


0a, 0, 0
  100 00000060 0A 50 6C 
              65 61 73 
              65 20 65 
              6E 74 65 
              72 20 61 
              6E 6F 74 
              68 65 72 
              20 77 6F 
              72 64 3A 
              0A 00 00 STR1    DCB              "\nPlease enter another word:",
 0x0a, 0, 0
  101 0000007E         
  102 0000007E         ;
  103 0000007E         ; subroutines
  104 0000007E         ;
  105 0000007E         
  106 0000007E         ; DIV 
  107 0000007E         ;
  108 0000007E         ; leaf function 
  109 0000007E         ;
  110 0000007E         ;
  111 0000007E         ; DIVIDE
  112 0000007E         ;
  113 0000007E         ; MOV R0, #200 ; N
  114 0000007E         ; MOV R1, #2  ; D
  115 0000007E         ; BL DIV 
  116 0000007E         
  117 0000007E         
  118 0000007E 00 00 E92D00F0 
                       DIV     PUSH             {R4-R7}
  119 00000084         
  120 00000084 E3A02000        MOV              R2, #0      ; Q = 0
  121 00000088 E3A03000        MOV              R3, #0      ; R = 0
  122 0000008C         
  123 0000008C E1A04000        MOV              R4, R0      ; R4 = R0
  124 00000090 E1B04084 
                       LOOP3   MOVS             R4, R4, LSL#1 ; shift R4 >> 1
  125 00000094 32855001        ADDCC            R5, R5, #1  ; R5++
  126 00000098 2A000000        BCS              TOTAL       ; end loop
  127 0000009C EAFFFFFB        B                LOOP3       ; repeat
  128 000000A0         
  129 000000A0 E2654020 
                       TOTAL   RSB              R4, R5, #32 ; R4 = n
  130 000000A4         
  131 000000A4 E2445001 
                       LOOP4   SUB              R5, R4, #1  ; R5 = i
  132 000000A8 E3550000        CMP              R5, #0      ; R5 = 0
  133 000000AC E1A04005        MOV              R4, R5      ; R4 = R5
  134 000000B0 BA00000E        BLT              END4        ; end loop
  135 000000B4 E1A03083        MOV              R3, R3, LSL#1 ; shift R3 << 1
  136 000000B8         
  137 000000B8 E3A06001        MOV              R6, #1      ; R6 = 1
  138 000000BC E1A06516        MOV              R6, R6, LSL R5 ; shift R6 << i
  139 000000C0 E0006006        AND              R6, R0, R6  ; AND N & R6
  140 000000C4         
  141 000000C4 E1A06536        MOV              R6, R6, LSR R5 ; shift R6 >> R5
                                                            
  142 000000C8 E3C33001        BIC              R3, R3, #1  ; bit clear



ARM Macro Assembler    Page 4 


  143 000000CC E0833006        ADD              R3, R3, R6  ; R3 = R3 + R6
  144 000000D0         
  145 000000D0 E1530001        CMP              R3, R1      ; R3 >= R1?
  146 000000D4 3AFFFFF2        BLO              LOOP4       ; restart loop
  147 000000D8         
  148 000000D8 E0433001        SUB              R3, R3, R1  ; R3 = R3 - R1
  149 000000DC E3A07001        LDR              R7, =1      ; R7 = 1
  150 000000E0 E1A07517        MOV              R7, R7, LSL R5 ; shift R7 << R5
                                                            
  151 000000E4 E1C22005        BIC              R2, R2, R5  ; bit clear
  152 000000E8 E0822007        ADD              R2, R2, R7  ; R2 = R2 + R7
  153 000000EC EAFFFFEC        B                LOOP4       ; repeat
  154 000000F0         
  155 000000F0         END4
  156 000000F0 E1A00002        MOV              R0, R2      ; R0 = R2
  157 000000F4 E1A01003        MOV              R1, R3      ; R1 = R3
  158 000000F8 E8BD00F0        POP              {R4-R7}
  159 000000FC E12FFF1E        BX               LR          ; return
  160 00000100         
  161 00000100         ;
  162 00000100         ; GET
  163 00000100         ;
  164 00000100         ; leaf function which returns ASCII character typed in U
                       ART #1 window in R0
  165 00000100         ;
  166 00000100 E59F1070 
                       GET     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  167 00000104 E5910000 
                       GET0    LDR              R0, [R1]    ; wait until
  168 00000108 E2100001        ANDS             R0, #0x01   ; receiver data
  169 0000010C 0AFFFFFC        BEQ              GET0        ; ready
  170 00000110 E59F1064        LDR              R1, =U0RBR  ; R1 -> U0RBR (Rece
                                                            iver Buffer Registe
                                                            r)
  171 00000114 E5D10000        LDRB             R0, [R1]    ; get received data
                                                            
  172 00000118 E12FFF1E        BX               LR          ; return
  173 0000011C         
  174 0000011C         ; 
  175 0000011C         ; PUT
  176 0000011C         ;
  177 0000011C         ; leaf function which sends ASCII character in R0 to UAR
                       T #1 window
  178 0000011C         ;
  179 0000011C E59F1054 
                       PUT     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  180 00000120 E5D11000        LDRB             R1, [R1]    ; wait until transm
                                                            it
  181 00000124 E2111020        ANDS             R1, R1, #0x20 
                                                            ; holding register
  182 00000128 0AFFFFFB        BEQ              PUT         ; empty
  183 0000012C E59F1048        LDR              R1, =U0THR  ; R1 -> U0THR
  184 00000130 E5C10000        STRB             R0, [R1]    ; output charcter
  185 00000134 E59F103C 
                       PUT0    LDR              R1, =U0LSR  ; R1 -> U0LSR
  186 00000138 E5D11000        LDRB             R1, [R1]    ; wait until 
  187 0000013C E2111040        ANDS             R1, R1, #0x40 ; transmitter



ARM Macro Assembler    Page 5 


  188 00000140 0AFFFFFB        BEQ              PUT0        ; empty (data flush
                                                            ed)
  189 00000144 E12FFF1E        BX               LR          ; return
  190 00000148         
  191 00000148         ; 
  192 00000148         ; PUTS
  193 00000148         ;
  194 00000148         ; sends NUL terminated ASCII string (address in R0) to U
                       ART #1 window
  195 00000148         ;
  196 00000148 E92D4010 
                       PUTS    PUSH             {R4, LR}    ; push R4 and LR
  197 0000014C E1A04000        MOV              R4, R0      ; copy R0
  198 00000150 E4D40001 
                       PUTS0   LDRB             R0, [R4], #1 ; get character + 
                                                            increment R4
  199 00000154 E3500000        CMP              R0, #0      ; 0?
  200 00000158 0A000001        BEQ              PUTS1       ; return
  201 0000015C EBFFFFEE        BL               PUT         ; put character
  202 00000160 EAFFFFFA        B                PUTS0       ; next character
  203 00000164 E8BD8010 
                       PUTS1   POP              {R4, PC}    ; pop R4 and PC
  204 00000168         
  205 00000168                 END
              40010000 
              E002C000 
              E000C00C 
              00000C35 
              E000C014 
              E000C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab6.d -o.\objects\lab6.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMS
IS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine
="__UVISION_VERSION SETA 516" --list=.\listings\lab6.lst lab6.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DIV 00000080

Symbol: DIV
   Definitions
      At line 118 in file lab6.s
   Uses
      None
Comment: DIV unused
END4 000000F0

Symbol: END4
   Definitions
      At line 155 in file lab6.s
   Uses
      At line 134 in file lab6.s
Comment: END4 used once
ENDA 00000040

Symbol: ENDA
   Definitions
      At line 88 in file lab6.s
   Uses
      At line 80 in file lab6.s
Comment: ENDA used once
GET 00000100

Symbol: GET
   Definitions
      At line 166 in file lab6.s
   Uses
      None
Comment: GET unused
GET0 00000104

Symbol: GET0
   Definitions
      At line 167 in file lab6.s
   Uses
      At line 169 in file lab6.s
Comment: GET0 used once
LOOP3 00000090

Symbol: LOOP3
   Definitions
      At line 124 in file lab6.s
   Uses
      At line 127 in file lab6.s
Comment: LOOP3 used once
LOOP4 000000A4

Symbol: LOOP4
   Definitions
      At line 131 in file lab6.s
   Uses
      At line 146 in file lab6.s
      At line 153 in file lab6.s

LOOPA 00000024




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: LOOPA
   Definitions
      At line 78 in file lab6.s
   Uses
      At line 86 in file lab6.s
Comment: LOOPA used once
PUT 0000011C

Symbol: PUT
   Definitions
      At line 179 in file lab6.s
   Uses
      At line 182 in file lab6.s
      At line 201 in file lab6.s

PUT0 00000134

Symbol: PUT0
   Definitions
      At line 185 in file lab6.s
   Uses
      At line 188 in file lab6.s
Comment: PUT0 used once
PUTS 00000148

Symbol: PUTS
   Definitions
      At line 196 in file lab6.s
   Uses
      None
Comment: PUTS unused
PUTS0 00000150

Symbol: PUTS0
   Definitions
      At line 198 in file lab6.s
   Uses
      At line 202 in file lab6.s
Comment: PUTS0 used once
PUTS1 00000164

Symbol: PUTS1
   Definitions
      At line 203 in file lab6.s
   Uses
      At line 200 in file lab6.s
Comment: PUTS1 used once
RESET 00000000

Symbol: RESET
   Definitions
      At line 19 in file lab6.s
   Uses
      None
Comment: RESET unused
STOP 00000040

Symbol: STOP
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 97 in file lab6.s
   Uses
      At line 97 in file lab6.s
Comment: STOP used once
STR0 00000044

Symbol: STR0
   Definitions
      At line 99 in file lab6.s
   Uses
      None
Comment: STR0 unused
STR1 00000060

Symbol: STR1
   Definitions
      At line 100 in file lab6.s
   Uses
      None
Comment: STR1 unused
TOTAL 000000A0

Symbol: TOTAL
   Definitions
      At line 129 in file lab6.s
   Uses
      At line 126 in file lab6.s
Comment: TOTAL used once
18 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 11 in file lab6.s
   Uses
      At line 26 in file lab6.s
Comment: PINSEL0 used once
U0LCR E000C00C

Symbol: U0LCR
   Definitions
      At line 15 in file lab6.s
   Uses
      At line 29 in file lab6.s
Comment: U0LCR used once
U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 16 in file lab6.s
   Uses
      At line 166 in file lab6.s
      At line 179 in file lab6.s
      At line 185 in file lab6.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 13 in file lab6.s
   Uses
      At line 170 in file lab6.s
Comment: U0RBR used once
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 14 in file lab6.s
   Uses
      At line 183 in file lab6.s
Comment: U0THR used once
5 symbols
357 symbols in table
